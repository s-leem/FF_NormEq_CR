///////////////////////////////////////////////////////////
//////// Testing: computing IsAssociate       /////////////
///////////////////////////////////////////////////////////
// Sumin Leem, 2023
//
// This script is to verify the correctness of IsAssociate, 
// a function testing whether or not given two elements of 
// the maximal order of a function field is associate.
//
///////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////
// LOAD FILES
///////////////////////////////////////////////////////////
load "testing_gen.mag";
load "functions.mag";



///////////////////////////////////////////////////////////////////////////////
// TESTING FUNCTION
// RunIsAssociateTest returns true if IsAssociate correctly determines alpha1 and alpha2 are associate or not.
///////////////////////////////////////////////////////////////////////////////
function RunIsAssociateTest(alpha1, alpha2, OF, tf)
    try 
        bool:=IsAssociate(alpha1, alpha2, OF);
    catch e
        e;
        return false;
    end try;

    if bool eq tf then
        return true;
    else
        return false;
    end if;
end function;


///////////////////////////////////////////////////////////////////////////////
//GLOBAL TESTING VARIABLES
///////////////////////////////////////////////////////////////////////////////
//Field sizes below 10 for auto gen cases
//Split curves do not exist for FF(2)
FIELDSIZE:= {3,4,5,7};
EXTENSION_DEG:= {2,3,4,5};
CoefficientDeg:= {2,3,4,5};

HEIGHT:={1,2,3,4,5};
Unit_EXP:={1..3};

/////////////////////////////////////////////////////////////////////////////
//SET THE NUMBER OF REPETITION
///////////////////////////////////////////////////////////////////////////////
Rep:=3;


///////////////////////////////////////////////////////////////////////////////
//START TESTING
///////////////////////////////////////////////////////////////////////////////


for q in FIELDSIZE do
for n in EXTENSION_DEG do

for repi in [1..Rep] do

    Fq:=GF(q);
    Fq_nonzero:={a: a in Fq} diff {Fq!0};
    A<x>:=PolynomialRing(Fq);
    Ay<t>:=PolynomialRing(A);

    f:= gen_def_poly(n,Random(CoefficientDeg),q);
    F:=FunctionField(f);
    OF:=MaximalOrderFinite(F);

    fund:=FundamentalUnits(OF);

    ///// 1. Testing for "True"-expected inputs
    // 1-1. Random non-constant alpha1 and alpha1/alpha2 is a non-constant unit.
    if fund ne [] then
        alpha1:=gen_random_OF_elt(Random(HEIGHT), F);
        u:= &*[fund[i]^Random(Unit_EXP): i in [1..#fund]];
        alpha2:=alpha1*u;

        assert RunIsAssociateTest(alpha1, alpha2, OF, true);
        assert RunIsAssociateTest(alpha2, alpha1, OF, true);
    end if;


    ///// 1-2. Random non-constant alpha1 and alpha1/alpha2 is a constant
    alpha1:=gen_random_OF_elt(Random(HEIGHT), F);
    alpha2:=alpha1*Random(Fq_nonzero);

    assert RunIsAssociateTest(alpha1, alpha2, OF, true);
    assert RunIsAssociateTest(alpha2, alpha1, OF, true);


    // 1-3. Both alpha1 and alpha2 are non-zero constants
    alpha1:=Random(Fq_nonzero);
    alpha2:=Random(Fq_nonzero);

    assert RunIsAssociateTest(alpha1, alpha2, OF, true);
    assert RunIsAssociateTest(alpha2, alpha1, OF, true);




    /////2. Testing for "False"-expected inputs
    // 2-1. non-constant random alpha1 and alpha2 that the ideals <alpha1> and <alpha2> are different 
    alpha1:=gen_random_OF_elt(Random(HEIGHT), F);
    alpha2:=gen_random_OF_elt(Random(HEIGHT), F);

    assert RunIsAssociateTest(alpha1, alpha2, OF, false);
    assert RunIsAssociateTest(alpha2, alpha1, OF, false);


    /////2-2. Either alpha1 or alpha2 is 0
    alpha1:=F!0;
    alpha2:=gen_random_OF_elt(Random(HEIGHT), F);

    if alpha2 ne 0 then
        // The first input is 0, but the second is not
        assert RunIsAssociateTest(alpha1, alpha2, OF, false);

        // The second input is 0, but the first is not
        assert RunIsAssociateTest(alpha2, alpha1, OF, false);

        // Both element inputs are 0
        assert RunIsAssociateTest(alpha1, alpha1, OF, false);
    end if;


    ///// 2-3. Non-zero constant alpha1 and non-unit alpha2

    alpha1:=Random(Fq_nonzero);
    alpha2:=gen_random_OF_elt(Random(HEIGHT), F);

    if not(IsUnit(OF!alpha2)) then
        // The first input is non-zero constant, but the second is not in Fq
        assert RunIsAssociateTest(alpha1, alpha2, OF, false);

        // The second input is non-zero constant, but the first is not in Fq
        assert RunIsAssociateTest(alpha2, alpha1, OF, false);

    end if;


    ///// 2-4. Either one of alpha1 and alpha2 is a unit, but the other is not.
    if fund ne [] then
        u:= &*[fund[i]^Random(Unit_EXP): i in [1..#fund]];
        alpha1:=u;
        alpha2:=gen_random_OF_elt(Random(HEIGHT), F);

        if not(IsUnit(OF!alpha2)) then
            // The first input is a unit but the second is not
            assert RunIsAssociateTest(alpha1, alpha2, OF, false);

            // The second input is a unit but the first is not
            assert RunIsAssociateTest(alpha2, alpha1, OF, false);
        end if;
    end if;

end for;

end for;
end for;







//// Test with Pre-selected inputs

Fq:=GF(5);
Fq_nonzero:={a: a in Fq} diff {Fq!0};
A<x>:=PolynomialRing(Fq);
Ay<t>:=PolynomialRing(A);

f:= t^3 + (2*x + 2)*t^2 + (4*x^2 + 3*x + 4)*t + 4*x^2 + 3*x + 3;
F:=FunctionField(f);
OF:=MaximalOrderFinite(F);

fund:=FundamentalUnits(OF);

///// 1. Testing for "True"-expected inputs
// 1-1. Random non-constant alpha1 and alpha1/alpha2 is a non-constant unit.
alpha1:=(4*x^2 + 3*x + 2)*F.1^2 + 2*x*F.1 + 3*x^2 + 3;
u:= (x^6 + 4*x^5 + 3*x^4 + 4*x^3 + 3*x^2 + x + 3)+ (x^6 + x^5 + x^4 + x^3 + 3*x^2 + x + 1)*F.1 + (3*x^4 + 3*x^3 + 4*x^2 + 2*x )*F.1^2;
alpha2:=alpha1*u;

assert RunIsAssociateTest(alpha1, alpha2, OF, true);
assert RunIsAssociateTest(alpha2, alpha1, OF, true);


///// 1-2. Random non-constant alpha1 and alpha1/alpha2 is a constant
alpha1:=(4*x^3 + 2*x^2 + 3*x)*F.1^2 + (x^2 + 4*x)*F.1 + x^2 + 4*x;
alpha2:=2*alpha1;

assert RunIsAssociateTest(alpha1, alpha2, OF, true);
assert RunIsAssociateTest(alpha2, alpha1, OF, true);


// 1-3. Both alpha1 and alpha2 are constants
alpha1:=F!4;
alpha2:=F!2;

assert RunIsAssociateTest(alpha1, alpha2, OF, true);
assert RunIsAssociateTest(alpha2, alpha1, OF, true);




/////2. Testing for "False"-expected inputs
// 2-1. non-constant random alpha1 and alpha2 that the ideals <alpha1> and <alpha2> are different 
alpha1:=(x^2 + x + 3)*F.1^2 + (2*x + 1)*F.1 + x + 2;
alpha2:=(2*x^2 + 4*x + 3)*F.1^2 + (4*x + 4)*F.1 + 2*x^2 + x + 4;

assert RunIsAssociateTest(alpha1, alpha2, OF, false);
assert RunIsAssociateTest(alpha2, alpha1, OF, false);


/////2-2. Either alpha1 or alpha2 is 0
alpha1:=F!0;
alpha2:=2*x*F.1^2 + (2*x + 2)*F.1 + x^3 + 4*x^2 + 2*x + 1;

// The first input is 0, but the second is not
assert RunIsAssociateTest(alpha1, alpha2, OF, false);

// The second input is 0, but the first is not
assert RunIsAssociateTest(alpha2, alpha1, OF, false);

// Both element inputs are 0
assert RunIsAssociateTest(alpha1, alpha1, OF, false);


///// 2-3. Non-zero constant alpha1 and non-unit alpha2
alpha1:=F!1;
alpha2:=(3*x + 3)*F.1^2 + (x + 2)*F.1 + 4*x^2 + 4*x;

// The first input is non-zero constant, but the second is not in Fq
assert RunIsAssociateTest(alpha1, alpha2, OF, false);

// The second input is non-zero constant, but the first is not in Fq
assert RunIsAssociateTest(alpha2, alpha1, OF, false);


///// 2-4. Either one of alpha1 and alpha2 is a unit, but the other is not.
alpha1:=(x^6 + 4*x^5 + 3*x^4 + 4*x^3 + 3*x^2 + x + 3)+(x^6 + x^5 + x^4 + x^3 + 3*x^2 + x + 1)*F.1 + (3*x^4 + 3*x^3 + 4*x^2 + 2*x)*F.1^2;
alpha2:=(x^3 + x^2 + 4*x + 2)*F.1^2 + (4*x + 1)*F.1 + x^2 + x + 2;

// The first input is a unit but the second is not
assert RunIsAssociateTest(alpha1, alpha2, OF, false);

// The second input is a unit but the first is not
assert RunIsAssociateTest(alpha2, alpha1, OF, false);


