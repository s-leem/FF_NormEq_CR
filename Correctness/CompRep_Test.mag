clear;

///////////////////////////////////////////////////////////
//////// Testing: computing compact representations  //////
///////////////////////////////////////////////////////////
//    Sumin Leem, 2023
//
// This script is to verify the correctness of the function 
// compactrep for computing compact representations.
//
///////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////
// Load files
///////////////////////////////////////////////////////////
load "testing_gen.mag";
load "functions.mag";


///////////////////////////////////////////////////////////////////////////////
// TESTING FUNCTION
// RunCompRepTest returns true if compactrep computes a correct 
// compact representation of alpha with given inputs, false otherwise.
///////////////////////////////////////////////////////////////////////////////
function RunCompRepTest(A, v, F, alpha)
    try 
        cr:=compactrep(A, v, F);
    catch e
        "Failed to compute a compact representation";
        e;
        return false;
    end try;

    if assigned cr then
        Fq:=ConstantField(F);

        if Type(alpha) ne SeqEnum then
        //// When the last input is an element alpha in standard representation, we test if cr represents alpha.
        //// This is for random input test.
            inf:=InfinitePlaces(F);
            v1:=[Abs(v[j]-Valuation(cr[1], inf[j])): j in [1..#inf]];
            l:=Ceiling(Log(2,Maximum(Maximum(v1),1)));
            if (#cr ge 2) and (#cr le l+2) then
                elt:=cr[1] * &*[1/cr[j]^(2^(#cr-j)): j in [2..#cr]];
                if (alpha/elt in Fq) then
                    return true;
                else
                    "Failed testing case: incorrect compact representation";
                    return false;
                end if;
            else
                "Failed testing case: incorrect compact representation sizes";
                return false;                
            end if;
        else
        //// When the last input is a sequence (which is a correct compact representation of alpha), we test if cr matches with the input sequence.
        //// This is for pre-selected input test.
            bool:=true;
            for i in [1..#alpha] do
                bool:= bool and alpha[i]/cr[i] in Fq;
            end for;
            return bool;
        end if;
    end if;
end function;



///////////////////////////////////////////////////////////////////////////////
//GLOBAL TESTING VARIABLES
///////////////////////////////////////////////////////////////////////////////
FIELDSIZE:= {3,4,5,7};
ExtensionDeg:= {2,3,4,5};
CoefficientDeg:= {2,3,4,5};
EltDeg:={1..5};


/////////////////////////////////////////////////////////////////////////////
//SET THE NUMBER OF REPETITION
///////////////////////////////////////////////////////////////////////////////
Rep:=10;


///////////////////////////////////////////////////////////////////////////////
//START TESTING
///////////////////////////////////////////////////////////////////////////////


/// Randomized test

for q in FIELDSIZE do
for n in ExtensionDeg do

for repi in [1..Rep] do

    // 1. Testing with F with one totally ramified infinite place.
    Fq:=GF(q);
    nonzeroFq:={a: a in Fq} diff {Fq!0};
    Aq<x>:=PolynomialRing(Fq);
    Ay<t>:=PolynomialRing(Aq);

    F:=F_total_ram_inf(q,n,Random(CoefficientDeg));
    OF:=MaximalOrderFinite(F);
    inf:=InfinitePlaces(F);
    deginf:=[Degree(inf[i]): i in [1..#inf]];

    F`OFi:=MaximalOrderInfinite(F);
    F`OF:=OF;
    F`infplaces:=inf;
    F`genus:=Genus(F);

    if (1 in deginf) then

        // 1-1. Random principal ideal, valuation vector
        alpha:=gen_random_OF_elt(Random(EltDeg),F);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

        assert RunCompRepTest(A, v, F, alpha);


        // 1-2. non-zero constant alpha
        alpha:=Random(nonzeroFq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

        assert RunCompRepTest(A, v, F, alpha);



        // 1-3. polynomial alpha (non-constant)
        alpha:=gen_random_poly(Random(EltDeg), Aq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

        assert RunCompRepTest(A, v, F, alpha);

    end if;



// 2. Testing for each rank
for r in {1..n-1} do

//    Fq:=GF(q);
//    Aq<x>:=PolynomialRing(Fq);
//    Ay<t>:=PolynomialRing(Aq);

    F:=specified_rank_F(q,n,Random(CoefficientDeg),r);
    OF:=MaximalOrderFinite(F);
    inf:=InfinitePlaces(F);
    deginf:=[Degree(inf[i]): i in [1..#inf]];

    F`OFi:=MaximalOrderInfinite(F);
    F`OF:=OF;
    F`infplaces:=inf;
    F`genus:=Genus(F);


    if (1 in deginf) then

        // 2-1. Random principal ideal, valuation vector
        alpha:=gen_random_OF_elt(Random(EltDeg),F);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

        assert RunCompRepTest(A, v, F, alpha);


        // 2-2. non-zero constant alpha
        alpha:=Random(nonzeroFq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

        assert RunCompRepTest(A, v, F, alpha);


        // 2-3. polynomial alpha (non-constant)
        alpha:=gen_random_poly(Random(EltDeg), Aq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

        assert RunCompRepTest(A, v, F, alpha);

    end if;
end for;

end for;
end for;
end for;




/////Test with pre-selected inputs

// 1. Testing with F with one totally ramified infinite place.
Fq:=GF(5); nonzeroFq:={a: a in Fq} diff {Fq!0};
Aq<x>:=PolynomialRing(Fq);
Ay<t>:=PolynomialRing(Aq);

f:= t^3 + 2*t^2 + (x + 1)*t + 4*x^2 + x + 2;
F<y>:=FunctionField(f);
OF:=MaximalOrderFinite(F);
inf:=InfinitePlaces(F);
deginf:=[Degree(inf[i]): i in [1..#inf]];

F`OFi:=MaximalOrderInfinite(F);
F`OF:=OF;
F`infplaces:=inf;
F`genus:=Genus(F);


// 1-1. Random principal ideal, valuation vector
alpha:=(4*x^3 + x^2 + x + 1)*y^2 + (x + 1)*y + 2*x^3 + 3*x^2 + 4*x;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[ (2*x^3 + 3*x^2 + 4*x) + (x + 1)*y + (4*x^3 + x^2 + x + 1)*y^2, 1];
assert RunCompRepTest(A, v, F, alphacr);


// 1-2. non-zero constant alpha
alpha:=OF!3;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:= [1, 1];
assert RunCompRepTest(A, v, F, alphacr);


// 1-3. polynomial alpha (non-constant)
alpha:=OF!3*x^3 + 2*x + 2;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[x^3 + 4*x + 4, 1];
assert RunCompRepTest(A, v, F, alphacr);


// 2. Testing for different unit ranks
// 2.1. r= 1
Fq:=GF(5);
Aq<x>:=PolynomialRing(Fq);
Ay<t>:=PolynomialRing(Aq);

f:=t^3 + (2*x^2 + 4*x + 1)*t^2 + (4*x + 3)*t + 2*x + 4;
F<y>:=FunctionField(f);
OF:=MaximalOrderFinite(F);
inf:=InfinitePlaces(F);
deginf:=[Degree(inf[i]): i in [1..#inf]];

F`OFi:=MaximalOrderInfinite(F);
F`OF:=OF;
F`infplaces:=inf;
F`genus:=Genus(F);

// 2.1-1. Random principal ideal, valuation vector
alpha:=(3*x + 4)*y^2 + (2*x + 3)*y + 3*x + 4;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[(2*x^3 + 3*x^2 + 2*x + 2)*y^2 + (4*x^5 + 4*x^4 + 3*x^3 + 3*x^2 + 1)*y +
         4*x^4 + x^2 + x + 3,
    y^2 + (2*x^2 + 4*x + 1)*y + 4*x + 3,
    1/(x + 2)*y,
    1/(x + 2),
    4/(x^2 + 4*x + 4)*y^2 + (3*x + 4)/(x + 2)*y + 3/(x + 2) ];
assert RunCompRepTest(A, v, F, alphacr);


// 2.1-2. non-zero constant alpha
alpha:=OF!2;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[1, 1];
assert RunCompRepTest(A, v, F, alphacr);


// 2.1-3. polynomial alpha (non-constant)
alpha:=OF!x^2 + 3;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[(2*x^2 + 1)*y^2 + (4*x^4 + 3*x^3 + 3*x^2 + 4*x + 3)*y + 3*x^4 + 4*x^3 +
        4*x^2 + 2*x,
    y^2 + (2*x^2 + 4*x + 1)*y + 4*x + 3,
    3/(x + 2),
    1/(x + 2)*y^2];
assert RunCompRepTest(A, v, F, alphacr);


// 2.2. r=n-1
Fq:=GF(5);
Aq<x>:=PolynomialRing(Fq);
Ay<t>:=PolynomialRing(Aq);

f:=t^3 + (2*x^2 + 1)*t^2 + (4*x + 4)*t + 2*x^2 + 3*x + 4;
F<y>:=FunctionField(f);
OF:=MaximalOrderFinite(F);
inf:=InfinitePlaces(F);
deginf:=[Degree(inf[i]): i in [1..#inf]];

F`OFi:=MaximalOrderInfinite(F);
F`OF:=OF;
F`infplaces:=inf;
F`genus:=Genus(F);

// 2.2-1. Random principal ideal, valuation vector
alpha:=(x + 3)*y^2 + (3*x + 4)*y + 3*x + 4;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[(2*x^7 + 3*x^6 + 2*x^5 + 2*x^3 + 2*x + 3)*y^2 + (4*x^9 + x^8 + 2*x^7 + 2*x^6
        + x^4 + 3*x^3 + 3*x^2 + 2*x + 1)*y + 2*x^9 + x^8 + 2*x^7 + 3*x^6 + 2*x^5
        + 4*x^4 + x^3 + 3*x^2 + x + 2,
    y^2 + (2*x^2 + 4)*y + x^2 + 4*x + 1,
    y + 2,
    y^2 + (2*x^2 + 4)*y + x^2 + 4*x + 4,
    2/(x + 4)*y^2 + (4*x + 2)*y + (3*x^2 + x + 2)/(x + 4)];
assert RunCompRepTest(A, v, F, alphacr);


// 2.2-2. non-zero constant alpha
alpha:=OF!1;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[1, 1];
assert RunCompRepTest(A, v, F, alphacr);


// 2.2-3. polynomial alpha (non-constant)
alpha:=OF!x^3 + x + 3;
A:=alpha*OF;
v:=[Valuation(alpha, inf[i]): i in [1..#inf]];

alphacr:=[ (4*x^9 + 2*x^8 + 4*x^7 + 4*x^6 + 2*x^3 + 2*x^2 + 3*x + 4)*y^2 + (3*x^11 +
        4*x^10 + 4*x^9 + x^8 + 2*x^7 + 2*x^6 + 3*x^5 + 4*x^3 + 2*x^2 + 2*x +
        3)*y + 4*x^11 + 3*x^10 + 3*x^9 + 4*x^8 + 3*x^6 + 4*x^5 + 2*x^3 + 2*x^2 +
        2*x + 3,
    1,
    (x^2 + 2*x)*y^2 + (2*x^4 + 4*x^3 + 4*x^2 + 3*x + 4)*y + x^4 + x^3 + 2*x^2 +
        2*x + 3,
    y + 2,
    (x^3 + 3*x^2 + 4*x + 4)/(x^4 + x^3 + x^2 + x + 1)*y^2 + (2*x^4 + 3*x^3 + 4*x
        + 3)/(x^3 + 2*x^2 + 3*x + 4)*y + (4*x^5 + 2*x^4 + 2*x^3 + 3*x^2 + x +
        4)/(x^4 + x^3 + x^2 + x + 1)];
assert RunCompRepTest(A, v, F, alphacr);
