clear;

/////////////////////////////////////////////////////////////////
//////// Testing: operations with compact representations  //////
/////////////////////////////////////////////////////////////////
//    Sumin Leem, 2023
//
// This script is to test the correctness of the function norm_cr 
// for computing the norm of an element in compact representation.
//
////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////
// Load files
////////////////////////////////////////////////////////////////
load "testing_gen.mag";
load "functions.mag";



///////////////////////////////////////////////////////////////////////////////
// TESTING FUNCTION
// RunNormCRTest returns true if NormCR computes the norm of alpha correctly
//   when alpha is given in a compact representation ///////////////////////////////////////////////////////////////////////////////
function RunNormCRTest(cr, norm)
    try 
        ncr:=norm_cr(cr);
    catch e
        e;
        return false;
    end try;

    if assigned ncr then
        F:=Universe(cr);
        nonzeroFq:={ a: a in ConstantField(F) } diff { F!0 };

        if ncr/norm in nonzeroFq then
            return true;
        else
            return false;
        end if;
    end if;

end function;


///////////////////////////////////////////////////////////////////////////////
//GLOBAL TESTING VARIABLES
///////////////////////////////////////////////////////////////////////////////
//Field sizes below 10 for auto gen cases
//Split curves do not exist for FF(2)
FIELDSIZE:= {3,4, 5,7};
ExtensionDeg:= {2,3,4,5};
CoefficientDeg:= {2,3,4,5};
EltDeg:={1..5};

VectorRange:={1..1000};

/////////////////////////////////////////////////////////////////////////////
//SET THE NUMBER OF REPETITION
/////////////////////////////////////////////////////////////////////////////
Rep:=10;


///////////////////////////////////////////////////////////////////////////////
//START TESTING
///////////////////////////////////////////////////////////////////////////////

for q in FIELDSIZE do
for n in ExtensionDeg do

for repi in [1..Rep] do

    Fq:=GF(q);
    nonzeroFq:={a: a in Fq} diff {Fq!0};
    Aq<x>:=PolynomialRing(Fq);
    Ay<t>:=PolynomialRing(Aq);


    // 1. Testing with F over Fq with the one totally ramified infinite place.

    F:=F_total_ram_inf(q,n,Random(CoefficientDeg));

    OF:=MaximalOrderFinite(F);
    inf:=InfinitePlaces(F);
    deginf:=[Degree(inf[i]): i in [1..#inf]];

    F`OFi:=MaximalOrderInfinite(F);
    F`OF:=OF;
    F`infplaces:=InfinitePlaces(F);
    F`genus:=Genus(F);

    if (1 in deginf) then

        // 1-1. Testing with non-zero constant alpha
        alpha:=OF!Random(nonzeroFq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];
        cr:=compactrep(A,v,F);

        assert RunNormCRTest(cr, Norm(F!alpha));



        // 1-2. Testing with polynomial alpha of degree >=1
        alpha:=OF!gen_random_poly(Random(EltDeg), Aq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];
        cr:=compactrep(A,v,F);

        assert RunNormCRTest(cr, Norm(F!alpha));



        // 1-3. compact representations of alpha in F
        alpha:=gen_random_OF_elt(Random(EltDeg),F);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];
        cr:=compactrep(A,v,F);

        assert RunNormCRTest(cr, Norm(F!alpha));


    end if;


for r in [1..n-1] do


    // 2. Testing with a function field F over Fq of degree n and unit rank r
    F:=specified_rank_F(q,n,Random(CoefficientDeg),r);

    OF:=MaximalOrderFinite(F);
    inf:=InfinitePlaces(F);
    deginf:=[Degree(inf[i]): i in [1..#inf]];

    F`OFi:=MaximalOrderInfinite(F);
    F`OF:=OF;
    F`infplaces:=InfinitePlaces(F);
    F`genus:=Genus(F);


    if (1 in deginf) then

        // 2-1. Testing with non-zero constant alpha
        alpha:=OF!Random(nonzeroFq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];
        cr:=compactrep(A,v,F);

        assert RunNormCRTest(cr, Norm(F!alpha));


        // 2-2. Testing with polynomial alpha of degree >=1
        alpha:=OF!gen_random_poly(Random(EltDeg), Aq);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];
        cr:=compactrep(A,v,F);

        assert RunNormCRTest(cr, Norm(F!alpha));


        // 2-3. compact representations of alpha in F
        alpha:=gen_random_OF_elt(Random(EltDeg),F);
        A:=alpha*OF;
        v:=[Valuation(alpha, inf[i]): i in [1..#inf]];
        cr:=compactrep(A,v,F);

        assert RunNormCRTest(cr, Norm(F!alpha));

    end if;

end for;

end for;
end for;
end for;





//// Test with pre-selected inputs
// 1. Testing with F over Fq with the one totally ramified infinite place.
Fq:=GF(5);
Aq<x>:=PolynomialRing(Fq);
Ay<t>:=PolynomialRing(Aq);

f:=t^3 + (2*x + 2)*t^2 + (3*x^2 + 4*x)*t + 4*x^3 + 3*x^2;
F:=FunctionField(f);
//OF:=MaximalOrderFinite(F);


// 1-1. Testing with non-zero constant alpha
alpha:= F!1;
norm:= F!1;
cr:= [F|
    1,
    1
];

assert RunNormCRTest(cr, norm);



// 1-2. Testing with polynomial alpha of degree >=1
alpha:= F!2*x^2 + 4*x;
norm:= F!3*x^6 + 3*x^5 + x^4 + 4*x^3;
cr:= [F|
    x^2 + 2*x,
    1
];

assert RunNormCRTest(cr, norm);


// 1-3. compact representations of alpha in F
alpha:= x*F.1^2 + (2*x^2 + x + 1)*F.1 + 4*x^2;
norm:= 2*x^9 + x^8 + 4*x^7 + x^5 + 2*x^4 + 4*x^3 + 2*x^2;
cr:= [
    2*x*F.1^2 + (4*x^2 + 2*x + 2)*F.1 + 3*x^2,
    1
];

assert RunNormCRTest(cr, norm);





// 2. Testing with a function field F over Fq of degree n and unit rank r
// 2.1 r=1
f:=t^3 + (x + 2)*t^2 + (x^2 + 3*x + 2)*t + x^2 + 2;
F:=FunctionField(f);


// 2.1-1. Testing with non-zero constant alpha
alpha:= F!1;
norm:= 1;
cr:= [F|
    1,
    1
];

assert RunNormCRTest(cr, norm);


// 2.1-2. Testing with polynomial alpha of degree >=1
alpha:= F!2*x + 1;
norm:= F!3*x^3 + 2*x^2 + x + 1;
cr:= [
    (3*x^2 + 3)/(x + 1)*F.1^2 + (3*x^3 + 3*x^2 + 4*x + 1)/(x + 1)*F.1 + (3*x^4 +
        x^3 + 2*x^2 + x + 4)/(x + 1),
    (x + 2)/(x + 1)*F.1^2 + (x^2 + 3*x + 4)/(x + 1)*F.1 + (x^3 + 4*x^2 + 2*x +
        1)/(x + 1),
    2/(x + 1)*F.1^2 + (4*x + 3)/(x + 1)*F.1 + (4*x + 3)/(x + 1)
];


assert RunNormCRTest(cr, norm);


// 2.1-3. compact representations of alpha in F
alpha:= (2*x + 1)*F.1^2 + (x + 3)*F.1 + 3*x^2 + x + 2;
norm:= 2*x^8 + 4*x^7 + 2*x^6 + 2*x^5 + 2*x^4 + 3*x^3 + x^2 + x + 3;
cr:= [
    (x^6 + 4*x^5 + x^3 + 2*x^2 + x + 3)*F.1^2 + (x^7 + x^5 + x^4 + 3*x^3 + 2*x +
        3)*F.1 + x^8 + x^7 + x^6 + 3*x^4 + 2*x^3 + 4*x^2 + 2,
    1,
    (x + 2)/(x + 1)*F.1^2 + (x^2 + 3*x + 4)/(x + 1)*F.1 + (x^3 + 4*x^2 + 2*x +
        1)/(x + 1),
    1,
    2/(x + 1)*F.1^2 + (4*x + 3)/(x + 1)*F.1 + (4*x + 3)/(x + 1)
];


assert RunNormCRTest(cr, norm);



// 2.2 r=2
f:=t^3 + (4*x + 1)*t^2 + (2*x + 3)*t + 1;
F:=FunctionField(f);


// 2.2-1. Testing with non-zero constant alpha
alpha:= F!1;
norm:= 1;
cr:= [F|
    1,
    1
];

assert RunNormCRTest(cr, norm);


// 2.2-2. Testing with polynomial alpha of degree >=1
alpha:= F!x^2 + x + 3;
norm:= x^6 + 3*x^5 + 2*x^4 + 4*x^3 + x^2 + 2*x + 2;
cr:= [
    (4*x^5 + x^4 + 3*x^2 + 4*x + 3)*F.1^2 + (x^6 + 3*x^5 + 4*x^4 + 3*x^2 + x +
        3)*F.1 + 3*x^6 + x^5 + 3*x^4 + x^3 + 4*x^2 + 3*x,
    (x + 3)*F.1^2 + (4*x^2 + 3*x)*F.1 + 2*x^2 + 2*x + 1,
    3*F.1^2 + (2*x + 1)*F.1 + 1,
    1
];


assert RunNormCRTest(cr, norm);



// 2.2-3. compact representations of alpha in F
alpha:= 2*x*F.1^2 + (x + 1)*F.1 + 2*x;
norm:= 3*x^5 + 4*x^4 + 2*x^3 + 4*x^2 + 4;
cr:= [
    (3*x^4 + 3*x^2 + 4*x + 4)*F.1^2 + (2*x^5 + 3*x^4 + 3*x^3 + x^2 + x + 2)*F.1
        + x^5 + 3*x^4 + x + 2,
    F.1^2 + (4*x + 1)*F.1 + 2*x + 3,
    F.1^2 + (4*x + 1)*F.1 + 2*x + 1,
    3*F.1^2 + (2*x + 1)*F.1 + 1
];


assert RunNormCRTest(cr, norm);

