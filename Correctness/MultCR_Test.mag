clear;

/////////////////////////////////////////////////////////////////
//////// Testing: MultCR                                   //////
/////////////////////////////////////////////////////////////////
//    Sumin Leem, 2023
//
// This script is to verify the correctness of mult_cr,
// a function computing multiplication of two elements of a function field
// in compact representations.
//
////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////
// Load files
////////////////////////////////////////////////////////////////
load "testing_gen.mag";
load "functions.mag";



///////////////////////////////////////////////////////////////////////////////
// TESTING FUNCTION
// RunMultCRTest returns true if MultCR computes a correct compact representation
// of alpha1*alpha2 when given compact representations of alpha1 and alpha2.
///////////////////////////////////////////////////////////////////////////////
function RunMultCRTest(cr1, cr2, alpha12)
    try 
        mcr:=mult_cr(cr1, cr2);
    catch e
        e;
        return false;
    end try;

    if assigned mcr then
        F:=Universe(cr1);
        nonzeroFq:={ a: a in ConstantField(F) } diff { F!0 };

        elt:=mcr[1] * &*[1/mcr[j]^(2^(#mcr-j)): j in [2..#mcr]];


        if Type(alpha12) eq FldFunElt then
        //// When the last input is an element of F (alpha1*alpha2) in standard representation, we test if mcr represents alpha1*alpha2.
        //// This is for random input test.
            if (alpha12/elt in nonzeroFq) then
                return true;
            else
                return false;
            end if;
        else
        //// When the last input is a sequence (which is a correct compact representation of alpha1*alpha2), we test if mcr represents the same element with the input sequence.
        //// This is for pre-selected input test.
            elt12:=alpha12[1] * &*[1/alpha12[j]^(2^(#alpha12-j)): j in [2..#alpha12]];
            if (elt12/elt in nonzeroFq) then
                return true;
            else
                return false;
            end if;
        end if;
    end if;

end function;



///////////////////////////////////////////////////////////////////////////////
//GLOBAL TESTING VARIABLES
///////////////////////////////////////////////////////////////////////////////
//Field sizes below 10 for auto gen cases
//Split curves do not exist for FF(2)
FIELDSIZE:= {3,4,5,7};
ExtensionDeg:= {2,3,4,5};
CoefficientDeg:= {2,3,4,5};
EltDeg:={1..2};


/////////////////////////////////////////////////////////////////////////////
//SET THE NUMBER OF REPETITION
/////////////////////////////////////////////////////////////////////////////
Rep:=3;


///////////////////////////////////////////////////////////////////////////////
//START TESTING
///////////////////////////////////////////////////////////////////////////////



for q in FIELDSIZE do
for n in ExtensionDeg do

for repi in [1..Rep] do

    // 1. Testing with F over Fq with the one totally ramified infinite place.
    Fq:=GF(q);
    nonzeroFq:={a: a in Fq} diff {Fq!0};
    Aq<x>:=PolynomialRing(Fq);
    Ay<t>:=PolynomialRing(Aq);

    F:=F_total_ram_inf(q,n,Random(CoefficientDeg));
    inf:=InfinitePlaces(F);
    deginf:=[Degree(inf[i]): i in [1..#inf]];
    OF:=MaximalOrderFinite(F);

    if (1 in deginf) then

        // 1-1 Testing with constant alpha1 and alpha2
        alpha1:=OF!Random(nonzeroFq);
        alpha2:=OF!Random(nonzeroFq);

        A1:=alpha1*OF;
        A2:=alpha2*OF;

        v1:=[Valuation(alpha1, inf[i]): i in [1..#inf]];
        v2:=[Valuation(alpha2, inf[i]): i in [1..#inf]];

        cr1:=compactrep(A1,v1,F);
        cr2:=compactrep(A2,v2,F);


        assert RunMultCRTest(cr1, cr2, alpha1*alpha2);



        // 1-2 Testing with polynomial alpha1 and alpha2 of degree >=1

        alpha1:=OF!gen_random_poly(Random(EltDeg), Aq);
        alpha2:=OF!gen_random_poly(Random(EltDeg), Aq);

        A1:=alpha1*OF;
        A2:=alpha2*OF;

        v1:=[Valuation(alpha1, inf[i]): i in [1..#inf]];
        v2:=[Valuation(alpha2, inf[i]): i in [1..#inf]];

        cr1:=compactrep(A1,v1,F);
        cr2:=compactrep(A2,v2,F);

        assert RunMultCRTest(cr1, cr2, alpha1*alpha2);



        // 1-3 Testing with alpha1 and alpha2 in OF, not polynomials.
        for deg1 in EltDeg do
        for deg2 in EltDeg do
        alpha1:=gen_random_OF_elt(deg1,F);
        alpha2:=gen_random_OF_elt(deg2,F);

        A1:=alpha1*OF;
        A2:=alpha2*OF;

        v1:=[Valuation(alpha1, inf[i]): i in [1..#inf]];
        v2:=[Valuation(alpha2, inf[i]): i in [1..#inf]];

        cr1:=compactrep(A1,v1,F);
        cr2:=compactrep(A2,v2,F);

        assert RunMultCRTest(cr1, cr2, alpha1*alpha2);


        end for; ///deg1
        end for; ///deg2


    end if;


for r in [1..n-1] do

    Fq:=GF(q);
    nonzeroFq:={a: a in Fq} diff {Fq!0};
    Aq<x>:=PolynomialRing(Fq);
    Ay<t>:=PolynomialRing(Aq);


    // 2. Testing with a function field F over Fq of degree n and unit rank r
    F:=specified_rank_F(q,n,Random(CoefficientDeg),r);
    OF:=MaximalOrderFinite(F);

    inf:=InfinitePlaces(F);
    deginf:=[Degree(inf[i]): i in [1..#inf]];


    if (1 in deginf) then

        // 1-1 Testing with constant alpha1 and alpha2
        alpha1:=OF!Random(nonzeroFq);
        alpha2:=OF!Random(nonzeroFq);

        A1:=alpha1*OF;
        A2:=alpha2*OF;

        v1:=[Valuation(alpha1, inf[i]): i in [1..#inf]];
        v2:=[Valuation(alpha2, inf[i]): i in [1..#inf]];

        cr1:=compactrep(A1,v1,F);
        cr2:=compactrep(A2,v2,F);

        assert RunMultCRTest(cr1, cr2, alpha1*alpha2);



        // 1-2 Testing with polynomial alpha1 and alpha2 of degree >=1

        alpha1:=OF!gen_random_poly(Random(EltDeg), Aq);
        alpha2:=OF!gen_random_poly(Random(EltDeg), Aq);

        A1:=alpha1*OF;
        A2:=alpha2*OF;

        v1:=[Valuation(alpha1, inf[i]): i in [1..#inf]];
        v2:=[Valuation(alpha2, inf[i]): i in [1..#inf]];

        cr1:=compactrep(A1,v1,F);
        cr2:=compactrep(A2,v2,F);

        assert RunMultCRTest(cr1, cr2, alpha1*alpha2);



        // 1-3 Testing with alpha1 and alpha2 in OF, not polynomials.
        for deg1 in EltDeg do
        for deg2 in EltDeg do
        alpha1:=gen_random_OF_elt(deg1,F);
        alpha2:=gen_random_OF_elt(deg2,F);

        A1:=alpha1*OF;
        A2:=alpha2*OF;

        v1:=[Valuation(alpha1, inf[i]): i in [1..#inf]];
        v2:=[Valuation(alpha2, inf[i]): i in [1..#inf]];

        cr1:=compactrep(A1,v1,F);
        cr2:=compactrep(A2,v2,F);

        assert RunMultCRTest(cr1, cr2, alpha1*alpha2);


        end for; ///deg1
        end for; ///deg2

    end if;

end for; //r

end for; //repi

end for; //n
end for; //q








////Test with pre-selected inputs	

// 1. Testing with F over Fq with the one totally ramified infinite place.
Fq:=GF(5);
Aq<x>:=PolynomialRing(Fq);
Ay<t>:=PolynomialRing(Aq);

f:=t^3 + 2*t^2 + t + x + 2;
F:=FunctionField(f);

OF:=MaximalOrderFinite(F);

// 1-1 Testing with constant alpha1 and alpha2
//alpha1:=1 alpha2:=2

cr1:=[F!1, F!1];
cr2:=[F!1, F!1];

mcr:=[F!1, F!1];

assert RunMultCRTest(cr1, cr2, mcr);



// 1-2 Testing with polynomial alpha1 and alpha2 of degree >=1
// alpha1= 2*x^2 + 4*x + 3, alpha2 = 3*x

cr1:=[ F!x^2 + 2*x + 4, 1];
cr2:=[ F!x, 1 ];

mcr:= [ x^3 + 2*x^2 + 4*x, 1 ];

assert RunMultCRTest(cr1, cr2, mcr);



// 1-3 Testing with alpha1 and alpha2 in OF, not polynomials.
//alpha1=4*x*F.1^2 + (3*x^2 + x)*F.1 + 2*x + 4, alpha2= (2*x + 2)*F.1^2 + (4*x + 2)*F.1 + x

cr1 :=  [
    2*x*F.1^2 + (4*x^2 + 3*x)*F.1 + x + 2,
    1
];
cr2 :=  [
    (3*x + 3)*F.1^2 + (x + 3)*F.1 + 4*x,
    1
];
mcr :=  [
    (4*x^2 + 3*x + 3)*F.1^2 + (4*x^3 + 2*x^2 + 3)*F.1 + 4*x^4 + 2*x^2 + x,
    1
];

assert RunMultCRTest(cr1, cr2, mcr);





// 2. Testing with a function field F over Fq of degree n and unit rank r
// 2.1 r=1

f:=t^3 + (x + 2)*t^2 + (4*x^2 + 3)*t + 4*x + 1;
F:=FunctionField(f);
OF:=MaximalOrderFinite(F);


// 2.1-1 Testing with constant alpha1 and alpha2
// alpha1 = 4, alpha2 = 2
cr1:= [F!1, F!1];
cr2:= [F!1, F!1];

mcr:=[F!1, F!1];

assert RunMultCRTest(cr1, cr2, mcr);



// 2.1-2 Testing with polynomial alpha1 and alpha2 of degree >=1
//alpha1 =  2*x + 3, alpha2 = x
cr1 :=  [
    (x + 4)*F.1,
    F.1,
    1/(x + 4)*F.1^2 + (x + 2)/(x + 4)*F.1 + (4*x^2 + 3)/(x + 4)
];
cr2 :=  [
    x*F.1,
    F.1,
    1/(x + 4)*F.1^2 + (x + 2)/(x + 4)*F.1 + (4*x^2 + 3)/(x + 4)
];
mcr :=  [
    (2*x^2 + 3*x)*F.1^2 + (x^3 + 4*x)*F.1 + x^2 + 4*x,
    F.1,
    1/(x + 4)*F.1^2 + (x + 2)/(x + 4)*F.1 + (4*x^2 + 3)/(x + 4),
    1/(x^2 + 3*x + 1)*F.1^2 + (4*x + 4)/(x^2 + 3*x + 1)*F.1 + (3*x^2 + x +
        3)/(x^2 + 3*x + 1)
];

assert RunMultCRTest(cr1, cr2, mcr);



// 2.1-3 Testing with alpha1 and alpha2 in OF, not polynomials.
// alpha1 = (x + 3)*F.1^2 + (3*x^3 + 4*x^2 + 3*x + 4)*F.1 + x^2 + 2*x + 4
// alpha2 = x*F.1^2 + (3*x^2 + 3*x + 3)*F.1 + 4*x^2 + 3*x + 3
cr1 :=  [
    (2*x^4 + x^2 + 2*x + 4)*F.1^2 + (x^5 + 2*x^4 + x^3 + 2*x^2 + 3*x)*F.1 + x^4
        + x^3 + 4*x^2 + x,
    F.1,
    1/(x + 4)*F.1^2 + (x + 2)/(x + 4)*F.1 + (4*x^2 + 3)/(x + 4),
    1/(x^2 + 3*x + 1)*F.1^2 + (4*x + 4)/(x^2 + 3*x + 1)*F.1 + (3*x^2 + x +
        3)/(x^2 + 3*x + 1)
];
cr2 :=  [
    (2*x^2 + 4)*F.1^2 + (4*x^3 + x^2 + x + 1)*F.1 + 4*x^2 + 2*x + 4,
    F.1,
    1/(x + 4)*F.1^2 + (x + 2)/(x + 4)*F.1 + (4*x^2 + 3)/(x + 4),
    1/(x^2 + 3*x + 1)*F.1^2 + (4*x + 4)/(x^2 + 3*x + 1)*F.1 + (3*x^2 + x +
        3)/(x^2 + 3*x + 1)
];
mcr :=  [
    (x^7 + x^6 + x^5 + x^4 + 3*x^3 + x^2 + 3)*F.1^2 + (3*x^4 + 2*x^3 + 3*x^2 +
        3*x + 1)*F.1 + 4*x^5 + x^4 + 4*x^3 + 4*x + 2,
    F.1,
    1/(x^2 + 3*x + 1)*F.1^2 + (4*x + 4)/(x^2 + 3*x + 1)*F.1 + (3*x^2 + x +
        3)/(x^2 + 3*x + 1),
    1/(x^2 + 3*x + 1)*F.1^2 + 1/(x^2 + 3*x + 1)*F.1 + (x + 1)/(x + 4)
];

assert RunMultCRTest(cr1, cr2, mcr);




// 2. Testing with a function field F over Fq of degree n and unit rank r
// 2.2 r=2

f:=t^3 + (2*x^2 + 1)*t^2 + (4*x^2 + 4*x + 4)*t + 2*x + 2;
F:=FunctionField(f);
OF:=MaximalOrderFinite(F);


// 2.2-1 Testing with constant alpha1 and alpha2
// alpha1 = 1, alpha2 = 1
cr1:= [F!1, F!1];
cr2:= [F!1, F!1];

mcr:=[F!1, F!1];

assert RunMultCRTest(cr1, cr2, mcr);



// 2.2-2 Testing with polynomial alpha1 and alpha2 of degree >=1
//alpha1 =  x^2 + 4*x, alpha2 = 4*x + 3
cr1 :=  [
    (x^6 + 4*x^5 + 3*x^3 + 2*x)*F.1^2 + (2*x^8 + 3*x^7 + 4*x^6 + 3*x^5 + 3*x^4 +
        3*x^3 + 4*x^2 + 3*x)*F.1 + x^7 + 3*x^6 + 2*x^4 + 4*x^3 + x^2 + 4*x,
    1,
    (x + 1)*F.1^2 + (2*x^3 + 2*x^2 + 4*x)*F.1 + x^2 + 3,
    2/(x + 2)*F.1^2 + (4*x + 2)*F.1 + (3*x^2 + x + 4)/(x + 2),
    2
];
cr2 :=  [
    (2*x^2 + x + 4)*F.1^2 + (4*x^4 + 2*x^3 + x^2 + x)*F.1 + 2*x^3 + 4*x^2 + x +
        2,
    1,
    (x + 1)*F.1^2 + (2*x^3 + 2*x^2 + 4*x)*F.1 + x^2 + 3,
    2/(x + 2)*F.1^2 + (4*x + 2)*F.1 + (3*x^2 + x + 4)/(x + 2)
];
mcr :=  [
    (2*x^8 + 3*x^7 + x^4 + 3*x^3 + 2*x^2 + 4*x)*F.1^2 + (4*x^10 + x^9 + 3*x^8 +
        4*x^7 + 3*x^6 + 2*x^3 + 3*x)*F.1 + 2*x^9 + x^8 + 3*x^6 + x^4 + 2*x^3 +
        3*x^2 + 3*x,
    (x + 1)*F.1^2 + (2*x^3 + 2*x^2 + 4*x)*F.1 + x^2 + 3,
    2/(x + 2)*F.1^2 + (4*x + 2)*F.1 + (3*x^2 + x + 4)/(x + 2),
    2,
    (2*x^2 + x + 3)/(x^4 + 3*x^3 + 4*x^2 + 2*x + 1)*F.1^2 + (4*x^3 + 3*x^2 + x +
        4)/(x^3 + x^2 + 2*x + 3)*F.1 + (3*x^4 + 3*x^3 + 4*x^2 + x)/(x^4 + 3*x^3
        + 4*x^2 + 2*x + 1)
];

assert RunMultCRTest(cr1, cr2, mcr);



// 2.2-3 Testing with alpha1 and alpha2 in OF, not polynomials.
// alpha1 = (x^2 + 4*x + 3)*F.1^2 + (4*x^3 + 4*x^2 + 3*x + 2)*F.1 + 2*x^3 + x^2 + 3
// alpha2 =  3*x*F.1^2 + (4*x + 2)*F.1 + 4*x^2 + 2*x + 3
cr1 :=  [
    (2*x^12 + 2*x^11 + 2*x^10 + 4*x^9 + 2*x^8 + 2*x^7 + 3*x^5 + 3*x^4 + 4*x^3 +
        2*x^2 + 3*x)*F.1^2 + (4*x^14 + 4*x^13 + 2*x^12 + 3*x^11 + 2*x^10 + 2*x^9
        + x^8 + 3*x^7 + 4*x^6 + 2*x^4 + 4*x^3 + x^2 + 2*x)*F.1 + 2*x^13 + 3*x^11
        + x^10 + 2*x^9 + x^8 + 3*x^6 + x^4 + 3*x^3 + 2*x,
    (x + 1)*F.1^2 + (2*x^3 + 2*x^2 + 4*x)*F.1 + x^2 + 3,
    (4*x + 4)/(x^2 + 4*x + 4)*F.1^2 + (3*x^2 + 2*x)/(x + 2)*F.1 + (x^3 + 3*x^2 +
        4*x + 1)/(x^2 + 4*x + 4),
    (x + 2)/(x^4 + 3*x^3 + x + 4)*F.1^2 + (3*x^2 + x + 1)/(x^4 + 3*x^3 + x +
        4)*F.1 + (x^2 + x + 1)/(x^4 + 3*x^3 + x + 4),
    (3*x^3 + 3*x)*F.1^2 + (x^5 + 4*x^3 + x^2 + 2*x + 3)*F.1 + 2*x^5 + 4*x^4 +
        2*x^3 + 4*x^2 + 3*x + 1
];
cr2 :=  [
    (4*x^9 + 4*x^8 + x^4 + x^3 + 3*x + 1)*F.1^2 + (3*x^11 + 3*x^10 + x^9 + 2*x^6
        + 4*x^5 + 2*x^4 + x^3 + x^2 + x + 2)*F.1 + 4*x^10 + 2*x^8 + 3*x^7 +
        2*x^6 + 4*x^5 + 4*x^4 + 2*x^3 + x^2 + 4*x,
    (x + 1)*F.1^2 + (2*x^3 + 2*x^2 + 4*x)*F.1 + x^2 + 3,
    2/(x + 2)*F.1^2 + (4*x + 2)*F.1 + (3*x^2 + x + 4)/(x + 2),
    (x + 1)/(x^2 + 4*x + 4)*F.1^2 + (2*x^2 + 3*x)/(x + 2)*F.1 + (4*x^3 + x^2 +
        2*x)/(x^2 + 4*x + 4),
    (x^2 + 1)/(x^4 + 4*x^3 + x^2 + 4*x + 1)*F.1^2 + (2*x^4 + 3*x^3 + x^2 + x +
        2)/(x^4 + 4*x^3 + x^2 + 4*x + 1)*F.1 + (4*x^4 + 4*x^3 + 2*x^2 +
        4*x)/(x^4 + 4*x^3 + x^2 + 4*x + 1)
];
mcr :=  [
    (x^21 + x^20 + 4*x^19 + 3*x^17 + x^16 + x^15 + x^14 + 4*x^13 + 4*x^11 + x^10
        + 3*x^8 + 4*x^7 + 2*x^6 + 2*x^5 + 4*x^3 + 4*x^2 + 2*x + 3)*F.1^2 +
        (2*x^23 + 2*x^22 + 2*x^21 + 2*x^19 + x^18 + 3*x^17 + 3*x^15 + 3*x^14 +
        2*x^13 + 2*x^7 + 2*x^6 + x^5 + 2*x^4 + 2*x^3 + 2*x^2 + 2)*F.1 + x^22 +
        2*x^20 + 3*x^19 + 2*x^18 + 2*x^17 + 3*x^16 + 2*x^15 + 4*x^13 + 3*x^11 +
        2*x^10 + 4*x^9 + 3*x^8 + x^7 + 3*x^6 + 2*x^5 + 2*x^3 + 3*x^2 + 4*x + 3,
    (x + 1)*F.1^2 + (2*x^3 + 2*x^2 + 4*x)*F.1 + x^2 + 3,
    2/(x + 2)*F.1^2 + (4*x + 2)*F.1 + (3*x^2 + x + 4)/(x + 2),
    (x + 1)/(x^2 + 4*x + 4)*F.1^2 + (2*x^2 + 3*x)/(x + 2)*F.1 + (4*x^3 + x^2 +
        2*x)/(x^2 + 4*x + 4),
    (4*x + 1)/(x^4 + 4*x^3 + x^2 + 4*x + 1)*F.1^2 + (3*x^3 + 3*x^2 + 1)/(x^4 +
        4*x^3 + x^2 + 4*x + 1)*F.1 + (3*x^3 + x^2 + 3*x + 3)/(x^4 + 4*x^3 + x^2
        + 4*x + 1),
    (3*x^3 + x + 2)/x^4*F.1^2 + (x^5 + 2*x^3 + 3)/x^4*F.1 + (2*x^5 + 4*x^4 +
        3*x^3 + 4*x^2 + x + 2)/x^4
];

assert RunMultCRTest(cr1, cr2, mcr);


