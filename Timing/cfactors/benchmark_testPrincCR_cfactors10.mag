
clear;

////////////////////////////////////////////////////////////////////////////////////////
//////// Testing: Benchmarking                                                  
////////
////////////////////////////////////////////////////////////////////////////////////////
//    Sumin Leem, 2023
//
// This script is to perform timing test for the principal ideal generator approach algorithm.
// The number of distinct factors of c varies, g, q, n, and deg(c) are fixed.
//
///////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////
// Load files
///////////////////////////////////////////////////////////	
load "testing_gen.mag";
load "functions.mag";
load "Timing/cfactors/FFlist_facc_degc10.mag";



///////////////////////////////////////////////////////////////////////////////
//START TESTING
///////////////////////////////////////////////////////////////////////////////


for j in [1..#clist] do

    dataPrincCR:=[];

for i in [1..#clist[j]] do


    F:=FunctionField(FF[3][i]);

    OF:=MaximalOrderFinite(F);
    inf:=InfinitePlaces(F);

    F`OFi:=MaximalOrderInfinite(F);
    F`OF:=OF;
    F`infplaces:=InfinitePlaces(F);
    F`genus:=gbound;


    c:=clist[j][i];


    cput:=Cputime();
    PrincCR_sol:=NE_PrincCR(c, OF);
    Append(~dataPrincCR,Cputime(cput));



end for;

    nex:=#dataPrincCR;
    timePrincCR:=(&+[dataPrincCR[j]: j in [1..nex]])/nex;

    "When the number of distinct factors of c is ", j;
    dataPrincCR;
    "Average: ", timePrincCR;

end for;




